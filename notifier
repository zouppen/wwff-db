#!/usr/bin/env php
<?php
# Requires php-xml, php-curl, php-pgsql

require_once __DIR__ . '/helpers.php';
require_once __DIR__ . '/matrix.php';
require_once __DIR__ . '/bandify.php';

// Config file
$conffile = array_key_exists(1, $argv) ? $argv[1] : __DIR__.'/settings.conf';
$conf = parse_ini_file($conffile, TRUE) or errx(1, "Configuration file %s is invalid", $conffile);

if (array_key_exists('matrix', $conf)) {
    $matrix = new Matrix($conf['matrix']['homeserver'], $conf['matrix']['token']);
} else {
    $matrix = null;
    print("Matrix section not defined in configuration, reporting to stdout.\n\n");
}

$db = pg_connect($conf['pg_connect']) or errx(2, "Database error");
$age_esc = pg_escape_string($conf['filter']['age']);
pg_prepare($db, 'query', <<<EOF
SELECT DISTINCT ON (park)
    a.park,
    local,
    frequency,
    info->>'wwff' AS name,
    info->>'locator' AS locator
FROM wwff a
LEFT JOIN wwff_park p ON a.park=p.park
WHERE a.park LIKE $1
  -- To reduce spam in case of an error (too wide filter)
  AND ts > CURRENT_TIMESTAMP-interval '1 day'
  -- To remove non-existing parks (typos in park names)
  AND info->>'wwff' IS NOT NULL
  AND COALESCE(ts-interval '$age_esc' > (
    SELECT ts
    FROM wwff_notify n
    WHERE n.park=a.park
      AND n.instance=$2
    ORDER BY n.ts DESC
    LIMIT 1
),true)
ORDER BY park, ts DESC
EOF) or errx(2, "Unable to prepare statement, missing tables?");
pg_prepare($db, 'mark', <<<'EOF'
INSERT INTO wwff_notify (park, instance)
VALUES ($1, $2)
EOF) or errx(2, "Unable to prepare statement, missing tables?");
pg_query($db, 'BEGIN') or errx(3, "Unable to start transaction");

$res = pg_execute($db, 'query', [$conf['filter']['like'], $conf['filter']['name']]);
if ($res === false) errx(3, "Unable to query database");

while (false !== ($o = pg_fetch_assoc($res))) {
    // Plain text notification
    $band = to_band($o['frequency']).':llÃ¤';
    $plain = sprintf('%s saapui aktivoimaan kohdetta %s (%s) %s %s',
                     $o['local'], $o['park'], $o['name'], $band, $o['locator']);

    $dom = new DOMDocument('1.0', 'UTF-8');
    $dom->appendChild($dom->createTextNode('ðŸ“» '));
    $call = $dom->createElement('strong');
    $call->appendChild($dom->createTextNode($o['local']));
    $dom->appendChild($call);
    $dom->appendChild($dom->createTextNode(' saapui aktivoimaan kohdetta ðŸŒ²'));
    $park = $dom->createElement('strong');
    $park->appendChild($dom->createTextNode($o['park']));
    $dom->appendChild($park);
    $dom->appendChild($dom->createTextNode(' '.$o['name'].' '.$band.', '));
    $dom->appendChild($dom->createTextNode($o['locator']));
    
    // Matrix notification
    if ($matrix) {
        $out = $matrix->notice($conf['matrix']['room'], $plain, $dom);
        $error = $matrix->get_error();
        if ($error !== '') {
            // Warn and go on, just don't mark the target as notified
            warnx("Unable to post to Matrix: %s", $error);
            continue;
        }
        print("$out\n");
    } else {
        print($plain."\n");
        print($dom->saveHTML()."\n");
    }

    // Mark as notified
    pg_execute($db, 'mark', [$o['park'], $conf['filter']['name']]) or errx(3, "Unable to mark notification to db");
}

if (@$conf['read_only']) {
    print("Read-only database requested, not storing sent notifications.\n");
} else {
    pg_query($db, 'END') or errx(3, "Unable to commit to database");
}
