#!/usr/bin/env php
<?php
# Requires php-xml, php-curl, php-pgsql

require_once __DIR__ . '/helpers.php';
require_once __DIR__ . '/scraper.php';
$utc = new DateTimeZone('UTC');
$utf8_fluff = '<meta http-equiv="Content-Type" content="text/html; charset=utf-8">';
$ids = [];
$halfaway = (new DateTime())->modify('+6 months');

// Postgresql statement used for inserts. See schema.sql for schema.
$insert_stmt = 'INSERT INTO wwff (ts, park, local, remote, frequency, notes) VALUES ($1, $2, $3, $4, $5, $6) ON CONFLICT DO NOTHING RETURNING id';
$insert_park_stmt = 'INSERT into wwff_park (park, info) VALUES ($1, $2) ON CONFLICT (park) DO UPDATE SET info = EXCLUDED.info';

// Config file
$conffile = array_key_exists(1, $argv) ? $argv[1] : __DIR__.'/settings.conf';
$conf = parse_ini_file($conffile, TRUE) or errx(1, "Configuration file %s is invalid", $conffile);

// Connect to the database and begin transaction
$db = pg_connect($conf['pg_connect']) or errx(2, "Database error");
pg_prepare($db, 'insert', $insert_stmt) or errx(2, "Unable to prepare statement, missing tables?");
pg_prepare($db, 'park', $insert_park_stmt) or errx(2, "Unable to prepare statement, missing tables?");
pg_query($db, 'BEGIN') or errx(3, "Unable to start transaction");

// Load and parse the document
$http = new HttpHelper();
$html = $http->fetch("https://www.cqgma.org/wwff/ww1011.php");
$http_error = $http->get_error();
if ($http_error !== '') errx(4, "Unable to fetch from cluster: %s", $http_error);
$scraper = new Scraper($html);

// Find the table with the contents. Rows with at least two cells accepted 
$table = $scraper->query('//table[@style]/tr[td[2]]');

foreach ($table as $tr) {
    // Scraper debugging tip:
    // print($scraper->dump($tr));
    
    $qso = [];

    // $1: Date
    $date_raw = $scraper->queryValue('td[1]', $tr).' '.$scraper->queryValue('td[2]', $tr);
    $date = DateTime::createFromFormat("d M Hi", $date_raw, $utc);
    // Original date has no year. Make sure the date refers to nearest
    // point in time.
    if ($date > $halfaway) $date->modify('-1 year');
    array_push($qso, $date->format('c'));

    // $2: WWFF park name
    $park = $scraper->queryValue('(td[5]//a)[2]', $tr);
    array_push($qso, $park);

    // $3: Activator callsign (person at park)
    array_push($qso, $scraper->queryValue('td[5]//b', $tr));

    // $4: Remote callsign
    array_push($qso, $scraper->queryValue('(td[5]//a)[4]', $tr));

    // $5: Frequency, kHz
    array_push($qso, floatval($scraper->queryValue('td[3]', $tr)));

    // $6: Notes
    array_push($qso, trim($scraper->queryValue('(.//td)[10]', $tr), 'Â '));

    // Site info. Dig data from onmouseover tooltip embedded HTML.
    $tooltip_raw = $scraper->queryValue('(td[5]//a)[2]/@onmouseover', $tr);
    // Take quotes off
    $tooltip_html = preg_replace_callback('/\\\\(.)/', function ($matches) {
        return $matches[1];
    }, $tooltip_raw);
    $tip_scraper = new Scraper($utf8_fluff . $tooltip_html);
    $facts_dom = $tip_scraper->query('//table/tr');
    $facts = [];
    foreach ($facts_dom as $fact) {
        $k = $tip_scraper->queryValue('td[1]', $fact);
        $v = $tip_scraper->queryValue('td[2]', $fact);
        $facts[strtolower($k)] = $v;
    }

    // Populate database
    $res = pg_execute($db, 'insert', $qso);
    if ($res === false) errx(3, "Unable to insert to database");

    // Collect ids for log files
    $arr = pg_fetch_array($res);
    if ($arr !== false) array_push($ids, $arr['id']);

    // Populate park data
    $res = pg_execute($db, 'park', [$park, json_encode($facts)]);
    if ($res === false) errx(3, "Unable to insert park data to database");
}

pg_query($db, 'END') or errx(3, "Unable to commit to database");

// Just for logging.
printf("New items %d / %d. New IDs: %s\n", count($ids), count($table), json_encode($ids));
